[{"/Users/anindita/Desktop/python-blockchain/client/src/index.tsx":"1","/Users/anindita/Desktop/python-blockchain/client/src/Router.tsx":"2","/Users/anindita/Desktop/python-blockchain/client/src/pages/LandingPage.tsx":"3","/Users/anindita/Desktop/python-blockchain/client/src/pages/RegisterPage.tsx":"4","/Users/anindita/Desktop/python-blockchain/client/src/pages/LoginPage.tsx":"5","/Users/anindita/Desktop/python-blockchain/client/src/pages/NotFound.tsx":"6","/Users/anindita/Desktop/python-blockchain/client/src/httpClient.ts":"7"},{"size":228,"mtime":1666323048000,"results":"8","hashOfConfig":"9"},{"size":606,"mtime":1666323048000,"results":"10","hashOfConfig":"9"},{"size":1231,"mtime":1666377675483,"results":"11","hashOfConfig":"9"},{"size":1457,"mtime":1666377240848,"results":"12","hashOfConfig":"9"},{"size":1247,"mtime":1666376812497,"results":"13","hashOfConfig":"9"},{"size":158,"mtime":1666323048000,"results":"14","hashOfConfig":"9"},{"size":87,"mtime":1666323048000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"zlzthn",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/anindita/Desktop/python-blockchain/client/src/index.tsx",[],["33","34"],"/Users/anindita/Desktop/python-blockchain/client/src/Router.tsx",[],"/Users/anindita/Desktop/python-blockchain/client/src/pages/LandingPage.tsx",[],"/Users/anindita/Desktop/python-blockchain/client/src/pages/RegisterPage.tsx",["35"],"import React, { useState } from \"react\";\nimport httpClient from \"../httpClient\";\n\nconst RegisterPage: React.FC = () => {\n  const [name, setName] = useState<string>(\"\");\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n\n  const registerUser = async () => {\n    try {\n      const resp = await httpClient.post(\"//localhost:2000/register\", {name,\n        email,\n        password,\n      });\n\n      window.location.href = \"/\";\n    } catch (error: any) {\n      if (error.response.status === 401) {\n        alert(\"Invalid credentials\");\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>Create an account</h1>\n      <form>\n        <div>\n        <label>Name: </label>\n          <input\n            type=\"name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            id=\"\"\n          />\n          <label>Email: </label>\n          <input\n            type=\"text\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            id=\"\"\n          />\n        </div>\n        <div>\n          <label>Password: </label>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            id=\"\"\n          />\n        </div>\n        <button type=\"button\" onClick={() => registerUser()}>\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","/Users/anindita/Desktop/python-blockchain/client/src/pages/LoginPage.tsx",["36"],"import React, { useState } from \"react\";\nimport httpClient from \"../httpClient\";\n\nconst LoginPage: React.FC = () => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n\n  const logInUser = async () => {\n    console.log(email, password);\n\n    try {\n      const resp = await httpClient.post(\"//localhost:2000/login\", {\n        email,\n        password,\n      });\n\n      window.location.href = \"/\";\n    } catch (error: any) {\n      if (error.response.status === 401) {\n        alert(\"Invalid credentials\");\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>Log Into Your Account</h1>\n      <form>\n        <div>\n          <label>Email: </label>\n          <input\n            type=\"text\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            id=\"\"\n          />\n        </div>\n        <div>\n          <label>Password: </label>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            id=\"\"\n          />\n        </div>\n        <button type=\"button\" onClick={() => logInUser()}>\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","/Users/anindita/Desktop/python-blockchain/client/src/pages/NotFound.tsx",[],"/Users/anindita/Desktop/python-blockchain/client/src/httpClient.ts",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":11,"column":13,"nodeType":"43","messageId":"44","endLine":11,"endColumn":17},{"ruleId":"41","severity":1,"message":"42","line":12,"column":13,"nodeType":"43","messageId":"44","endLine":12,"endColumn":17},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"@typescript-eslint/no-unused-vars","'resp' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]